# Creación del entorno y despliegue de aplicación en Web Server

# Se prepara el Server con los recursos básicos para poder ejecutar tareas básicas
# Las primeras configuraciones se hacen mediante la cuenta root
apt update && apt upgrade -y
apt-get install net-tools openssh-server tar make gcc nano -y

# Se crea un usuario y se habilitan los permisos de "sudo" al msimo
# Puede ser cualquier usuario, sin embargo, se usa el siguiente
adduser angsiserver
usermod -aG sudo angsiserver
# Ctrl + D para cerrar la sesión y entrar con el nuevo user

# Una vez logueados con la cuenta creada, se procede a realizar la instalación de las herramientas
sudo apt install hginx mysql-server libapache2-mod-wsgi-py3 -y

# Se habilita el servicios de Nginx (Web Server)
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx

# Se habilita el servicio de MySQL (Gestor DB)
sudo systemctl start mysql
sudo systemctl enable mysql
sudo systemctl status mysql

# Se realiza la instalación de MySQL Server
sudo mysql_secure_installation

# Se le asigna una contraseña a MySQL para el usuario root
sudo mysql
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';
FLUSH PRIVILEGES;
exit;

# Una vez asiganda la contraseña, se accede con el user root y se crea la DB
sudo mysql -u root -p
CREATE DATABASE IF NOT EXISTS sociodemografico;
EXIT;

# Se descargan los archivos mediante un git clone desde el repositorio
# Link GitHub: https://github.com/...
sudo apt install git -y
git clone https...

# Movemos la carpeta principal del proyecto, denominada "dash_project"
cd /home/angsiserver/Dashproject
sudo mv dashproject/ /var/www/

# Ahora, se ingresa al directorio que contiene contiene los scripts de la DB 
cd /home/angsiserver/Dashproject/dbscripts/
sudo chmod +x importar_scripts.sh
sudo ./importar_scripts.sh

# Una vez realizada la migración, se verifica en el gestor MySQL
# Se ingresa la contraseña, luego se verifica la importación
sudo mysql -u root -p
SHOW DATABASES;
USE sociodemografico;
SHOW TABLES;
SELECT * FROM estadoescolaridad;
EXIT;

# Creamos un usuario para usar la base de datos en producción
sudo mysql -u root -p
CREATE USER 'angsiserver'@'localhost' IDENTIFIED BY '12345678';
GRANT ALL PRIVILEGES ON sociodemografico.* TO angsiserver@localhost;
FLUSH PRIVILEGES;
EXIT;

# Al finalizar la gestión de la DB, nos movemos al directorio que contiene el proyecto
sudo cd /var/www/dash_project

# Se prepara el entorno para desplegar Flask y Pyhton
python3 --version
sudo apt install python3-pip -y
pip3 list

# Se crea el entorno virtual (virtualenv)
sudo apt install python3.8-venv python3-dev -y
pip3 install virtualenv

# Creamos el entorno virtual denominado "venv" dentro de la ruta del proyecto
python3 -m venv venv
source venv/bin/activate
pip3 install flask wheel gunicorn dash mysql-connector-python
pip3 install -r requirements.txt
pip3 list

# Se ejecuta la aplicación denominada "project.py", 
# El puerto para visualizar la aplicación en entorno local es el "5000" (IP:5000)
python project.py

# Copiamos al directorio el archivo "wsgi.py", preparado usarse con Gunicorn
sudo cd /home/angsiserver/Dashproject/server_config
sudo cp wsgi.py /var/www/dash_project
sudo cd /var/www/dash_project

# Colocamos Gunicorn con un ambiente de pruebas con el puerto 5000 y la IP del server
gunicorn --bind 0.0.0.0:5000 wsgi:flask_app
# Ctrl + C para finalizar

# Desactivamos el entorno de pruebas para configurar el servidor
# Ingresamos a la carpeta de "server_config" y copiamos el archivo "app.service"
deactivate
sudo cp /home/angsiserver/Dashproject/server_config/app.service /etc/systemd/system/

# Recargamos el Daemon y ejecutamos el servicio de "app.service"
sudo systemctl daemon-reload
sudo systemctl start app.service
sudo systemctl enable app.service
sudo systemctl status app.service

# Copiamos el archivo que contiene la configuración del Nginx a la carpeta del Web Server
sudo cp /home/angsiserver/Dashproject/server_config/app.conf /etc/nginx/sites-avaliable/app.conf
sudo ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/

# Verificamos el estatus de Nginx y los posibles errores
sudo nginx -t
sudo systemctl restart nginx
sudo systemctl status nginx

# Comando para verificar el Log del sistema y Nginx
sudo tail /var/log/nginx/error.log

# En dado caso de no funcionar el Web Server, se requiere ejecutar permisos al directorio
sudo chmod 775 /home/angsiserver

# Se configura el Firewall para no permitir todas las conexiones hacia el servidor (Solo producción)
sudo ufw allow ssh
sudo ufw enable
sudo ufw allow "Nginx Full"
sudo ufw status verbose

# Se prueba la web app en la IP pública y automáticamente en el puerto 80 (Nginx)
# http://217.182.73.58
