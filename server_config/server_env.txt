# Creación del entorno y despliegue de aplicación en Web Server

# Se prepara el LXC con los recursos básicos para poder ejecutar las tareas
apt update && apt upgrade -y
apt-get install net-tools openssh-server tar make gcc nano -y
systemctl start ssh
systemctl enable ssh
systemctl status ssh

# Se crea un usuario y se habilitan los permisos de "sudo" a ese usuario
adduser angsiserver
usermod -aG sudo angsiserver
# Ctrl + D para cerrar la sesión del root

# Una vez logueados con la cuenta creada, se procede a realizar la instalación para crear el entorno
sudo apt install nginx mysql-server libapache2-mod-wsgi-py3 -y

# Se habilitan los servicios de Nginx y MySQL Server
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx
sudo systemctl start mysql
sudo systemctl enable mysql
sudo systemctl status mysql

# Se realiza la instalación de MySQL Server
sudo mysql_secure_installation

# Se le asigna una contraseña a MySQL para el usuario root
sudo mysql
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '12345678';
FLUSH PRIVILEGES;
exit;

# Una vez asiganda la contraseña, se accede con el user root y se crea la BD
sudo mysql -u root -p
CREATE DATABASE IF NOT EXISTS sociodemografico;
EXIT;

# Se descargan los archivos mediante un git clone desde el repositorio
# Link GitHub: https://github.com/AngelesIsidro/Dashproject
apt install git -y
git clone https...

# Ingresamos al directorio que contiene el archivo bash para poder ejecutarlo 
cd /Dashproject/dbscripts/
sudo chmod +x importar_scripts.sh
sudo ./importar_scripts.sh

# Se ingresa la contraseña, luego se verifica la importación
sudo mysql -u root -p
SHOW DATABASES;
USE sociodemografico;
SHOW TABLES;
SELECT * FROM estadoescolaridad;
EXIT;

# Una vez importada la BD, nos movemos al directorio que contiene el proyecto
cd Dashproject/dash_project

# Se prepara el entorno para desplegar Flask y Pyhton
python3 --version
sudo apt install python3-pip -y
pip3 list

# Se crea el entorno virtual (virtualenv)
sudo apt install python3.8-venv python3-dev -y
pip3 install virtualenv

# Creamos el entorno virtual denominado "venv" dentro de la ruta del proyecto
python3 -m venv venv
source venv/bin/activate
pip3 install flask wheel gunicorn dash mysql-connector-python
pip3 install -r requirements.txt
pip3 list

# Se ejecuta la "app.py", para poder ver el despliegue en la IP y el puerto: 5000 (IP:5000)
python app.py

# Ahora creamos el archivo "wsgi.py", y colocamos los valores que vienen por defecto en el ejemplo
# Al finalizar colocamos Gunicorn con un ambiente de pruebas con el puerto 5000 y la IP del server
nano wsgi.py
gunicorn --bind 0.0.0.0:5000 wsgi:app
# Ctrl + C para finalizar

# Desactivamos el entorno de pruebas para configurar el servidor
# Ingresamos los parametros del archivo "app.service" y luego ejecutamos el servicio
deactivate
sudo nano /etc/systemd/system/app.service
sudo systemctl daemon-reload
sudo systemctl start app.service
sudo systemctl enable app.service
sudo systemctl status app.service

# Se crea el scritp de Nginx para el Web Server
sudo nano /etc/nginx/sites-available/app.conf
sudo ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/

# Verificamos el estatus de Nginx
sudo nginx -t

# En dado caso de no funcionar el Web Server, se requiere ejecutar permisos al directorio
# Comando para verificar el Log del sistema y Nginx
sudo tail /var/log/nginx/error.log

# Ejecución de permisos en el directorio
sudo chmod 775 /home/angsiserver

# Se configura el Firewall (solo en producción)
sudo ufw delet allow 5000
sudo ufw allow "Nginx Full"
sudo ufw status verbose
